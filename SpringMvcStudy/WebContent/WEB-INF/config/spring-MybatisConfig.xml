<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans.xsd  
       http://mybatis.org/schema/mybatis-spring 
       http://mybatis.org/schema/mybatis-spring.xsd  
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd
       http://mybatis.org/schema/mybatis-spring 
       http://mybatis.org/schema/mybatis-spring.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx  
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:annotation-config/>
	<!--引入属性文件 -->
	<context:property-placeholder
		location="/WEB-INF/config/configuration.properties" />

	<!--数据库连接 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize">
			<value>1</value>
		</property>
		<!-- 最大连接池数量 -->
		<property name="maxActive">
			<value>5</value>
		</property>
		<!-- 最小连接池数量 -->
		<property name="minIdle">
			<value>1</value>
		</property>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait">
			<value>60000</value>
		</property>
		<!-- 配置监控统计拦截的filters 
			属性类型是字符串，通过别名的方式配置扩展插件，
			常用的插件有：
			监控统计用的filter:stat 
			日志用的filter:log4j 
			防御sql注入的filter:wall -->
		<property name="filters">
			<value>stat</value>
		</property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>60000</value>
		</property>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis">
			<value>300000</value>
		</property>
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。
			如果validationQuery为null，testOnBorrow、testOnReturn、
			testWhileIdle都不会其作用。 -->
		<property name="validationQuery">
			<value>SELECT 'x'</value>
		</property>
		<!--  建议配置为true，不影响性能，并且保证安全性。
			申请连接的时候检测，如果空闲时间大于
			timeBetweenEvictionRunsMillis，
			执行validationQuery检测连接是否有效。  -->
		<property name="testWhileIdle">
			<value>true</value>
		</property>
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。  -->
		<property name="testOnBorrow">
			<value>false</value>
		</property>
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能  -->
		<property name="testOnReturn">
			<value>false</value>
		</property>
		<!-- 是否缓存preparedStatement，也就是PSCache。
			PSCache对支持游标的数据库性能提升巨大，比如说oracle。
			在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
			5.5及以上版本有PSCache，建议开启 -->
		<property name="poolPreparedStatements">
			<value>true</value>
		</property>
		<!-- 要启用PSCache，必须配置大于0，当大于0时，
			poolPreparedStatements自动触发修改为true。
			在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
			可以把这个数值配置大一些，比如说100  -->
		<property name="maxOpenPreparedStatements">
			<value>20</value>
		</property>
	</bean>

	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="/WEB-INF/config/mybatis-conf.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/study/resources/mapper/*.xml</value>
			</list>
		</property>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 该包下的类支持注解，可以自动引入mapper类 -->
	<mybatis:scan base-package="com.study.dao" />

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="read*" read-only="true" />
			
			<tx:method name="sync*" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="executeService"
			expression="execution(* com.study.dao.*.*(..))" />
		<aop:advisor pointcut-ref="executeService" advice-ref="txAdvice" />
	</aop:config>

</beans>